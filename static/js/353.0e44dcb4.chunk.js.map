{"version":3,"file":"static/js/353.0e44dcb4.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/Profile.module.css?b512","webpack://my-app/./src/components/ProfileData/ProfileData.module.css?a02a","components/ProfileData/ProfileData.jsx","webpack://my-app/./src/components/Post/Post.module.css?4903","components/Post/Post.js","webpack://my-app/./src/components/MyPosts/MyPosts.module.css?3104","webpack://my-app/./src/components/MyPosts/Newpost/Newpost.module.css?5568","components/MyPosts/Newpost/Newpost.jsx","components/MyPosts/Newpost/NewpostContainer.jsx","components/MyPosts/MyPosts.js","components/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileStatusHooks.jsx","components/Profile/Profile.js","components/Profile/ProfileContainer.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Content\":\"Profile_Content__5tdw+\",\"img\":\"Profile_img__D-lc4\",\"Status\":\"Profile_Status__GnALK\"};","// extracted by mini-css-extract-plugin\nexport default {\"userNickname\":\"ProfileData_userNickname__BZj4x\",\"item\":\"ProfileData_item__XHF+F\"};","import css from './ProfileData.module.css';\r\nimport avatar from '../../images/i.jpg'\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\nconst ProfileData = (props) => {\r\n    \r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    } else {\r\n        return (\r\n            <div className={css.item}>\r\n                <img src={props.profile.photos.small === null ? avatar : props.profile.photos.small} alt=\"avatar\" />\r\n                <div className={css.userNickname}>{props.profile.fullName}</div>\r\n                <ul className=\"Data\">\r\n                    <li>\r\n                        {props.profile.aboutMe}\r\n                    </li>\r\n                    <li>\r\n                        {props.profile.lookingForAJobDescription}\r\n                    </li>\r\n                    <li>\r\n                        {props.profile.contacts.facebook}\r\n                    </li>\r\n                    <li>\r\n                        {props.profile.contacts.website}\r\n                    </li>\r\n                    <li>\r\n                        {props.profile.contacts.vk}\r\n                    </li>\r\n                    <li>\r\n                        {props.profile.contacts.twitter}\r\n                    </li>\r\n                    <li>\r\n                        {props.profile.contacts.instagram}\r\n                    </li>\r\n                    <li>\r\n                        {props.profile.contacts.youtube}\r\n                    </li>\r\n                    <li>\r\n                        {props.profile.contacts.github}\r\n                    </li>\r\n                    <li>\r\n                        {props.profile.contacts.mainLink}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n\r\n}\r\n\r\nexport default ProfileData;","// extracted by mini-css-extract-plugin\nexport default {\"mesage\":\"Post_mesage__J2JPw\",\"likes\":\"Post_likes__r7r3S\"};","import classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.mesage}>\r\n                {props.mesage}\r\n            </div>\r\n            <div className={classes.likes}>\r\n                {props.likes}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"MyPosts_title__YnfBk\",\"item\":\"MyPosts_item__p1d-P\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Newpost_form__cTMbI\",\"label\":\"Newpost_label__mw9Cc\",\"input\":\"Newpost_input__x3srn\",\"submit\":\"Newpost_submit__RQTQ7\"};","import React from 'react';\r\nimport classes from './Newpost.module.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from './../../../utils/validators/validators';\r\nimport { Textarea } from './../../FormsControls/FormsControls';\r\n\r\n\r\nlet Newpost = React.memo ( props => {\r\n    \r\n    //let placeholder = props.postsPage.placeholterText;\r\n\r\n    \r\n    //let newPostElement = React.createRef();\r\n    //let onPostChange = () => {\r\n    //    let text = newPostElement.current.value;\r\n    //    props.updateNewPostText(text)\r\n    //}\r\n    \r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <label className={classes.label}>New post</label>\r\n            <AddNewPostForm onSubmit={onAddPost} placeholder='Введите текст...' />\r\n        </>\r\n        \r\n    )\r\n    \r\n})\r\n\r\n\r\n/*\r\nclass Newpost extends React.PureComponent {\r\n\r\n    // если используем extends React.Component, то оптимизируем рендеры с помощью shouldComponentUpdate\r\n    //shouldComponentUpdate (nextProps, nextState) {\r\n    //    return (this.props.postsPage.postsData !== nextProps.postsPage.postsData || this.state !== nextState);\r\n    //}\r\n    \r\n\r\n    render () {\r\n        console.log('rend')\r\n        \r\n        let onAddPost = (values) => {\r\n            this.props.addPost(values.newPostText)\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <label className={classes.label}>New post</label>\r\n                <AddNewPostForm onSubmit={onAddPost} placeholder='Введите текст...' />\r\n            </>\r\n        \r\n        )\r\n    }\r\n    \r\n}\r\n*/\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewpost = React.memo((props) => {\r\n    return (\r\n        <form className={classes.form} onSubmit={props.handleSubmit} >\r\n            <Field component={Textarea} \r\n                name='newPostText' \r\n                placeholder={props.placeholder} \r\n                validate={[required, maxLength10]} />\r\n            {/*\r\n            <textarea \r\n                className={classes.input} \r\n                ref={newPostElement} \r\n                placeholder={placeholder} \r\n                onChange={onPostChange} \r\n                value={props.postsPage.newPostText}\r\n            />*/}\r\n            <button \r\n            //onClick={onAddPost} \r\n            type=\"submit\" \r\n            className={classes.submit}>\r\n                Add post\r\n            </button>\r\n        </form>\r\n    )\r\n})\r\n\r\nlet AddNewPostForm = reduxForm({form: 'ProfileAddNewPostForm'})(AddNewpost);\r\n\r\nexport default Newpost;","import { \r\n    //updateNewPostTextActionCreator, \r\n    addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport Newpost from './Newpost';\r\nimport {connect} from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        postsPage: state.postsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        /*\r\n        updateNewPostText: (text) => {\r\n            dispatch(updateNewPostTextActionCreator(text));\r\n        },*/\r\n        addPost: (newPostText)=> {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        },\r\n    }\r\n}\r\n\r\nconst NewpostContainer = connect(mapStateToProps, mapDispatchToProps)(Newpost);\r\n\r\nexport default NewpostContainer;\r\n\r\n","import Post from '../Post/Post';\r\nimport classes from './MyPosts.module.css';\r\nimport NewpostContainer from './Newpost/NewpostContainer';\r\n\r\nconst MyPosts = (props) => {\r\n    \r\n    let postList = props.postsPage.postsData.map( post => <Post mesage={post.post} likes={post.likes} id={post.id} key={post.id}/> )\r\n\r\n    return (\r\n        <div>\r\n            <h2 className={classes.title}>My posts</h2>\r\n            <div className={classes.item}>\r\n                <NewpostContainer\r\n                    //postsPage={props.postsPage}\r\n                    //dispatch={props.dispatch} \r\n                />\r\n            </div>\r\n            {postList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import { addPostActionCreator } from '../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport MyPosts from './MyPosts';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        postsPage: state.postsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: ()=> {\r\n            dispatch(addPostActionCreator());\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {useState, useEffect} from \"react\";\r\nimport style from \"./Profile.module.css\"\r\n\r\n\r\nconst ProfileStatusHooks = (props) => {\r\n    \r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n        {\r\n            !editMode && <span className={style.Status} onDoubleClick={activateEditMode}>{props.status || 'No status'}</span>\r\n        }\r\n        {\r\n            editMode && <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode} value={status} /> \r\n        }\r\n    </>)\r\n}\r\n\r\nexport default ProfileStatusHooks;","import FirstPofileImg from '../../images/first_image.jpg';\r\nimport classes from './Profile.module.css';\r\nimport ProfileData from './../ProfileData/ProfileData';\r\nimport MyPostsContainer from './../MyPosts/MyPostsContainer';\r\n//import ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusHooks from './ProfileStatusHooks';\r\n\r\n\r\nconst Profile = (props) => {\r\n    \r\n    return (\r\n        <div className={classes.Content}>\r\n            <img src={FirstPofileImg} alt=\"first profile\" className={classes.img} />\r\n            <ProfileData profile={props.profile} />\r\n            {/*<ProfileStatus status={props.status} updateStatus={props.updateStatus} />*/}\r\n            <ProfileStatusHooks status={props.status} updateStatus={props.updateStatus} />\r\n            <div className=\"\">\r\n                <MyPostsContainer />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import {connect} from 'react-redux';\r\nimport Profile from './Profile';\r\nimport React from 'react';\r\nimport { getOnUserProfileThink, getStatusThink, updateStatusThink } from '../../redux/profile-reducer';\r\nimport { compose } from 'redux';\r\n//import { withAuthRedirect } from './../../hoc/withAuthRedirect';\r\nimport { withRouter } from '../common/withRouter/withRouter';\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n\r\n    componentDidMount () {\r\n        let userId = this.props.router.params.userId\r\n        if (!userId) {\r\n            userId = this.props.myId\r\n        }\r\n        this.props.getOnUserProfileThink(userId);\r\n        this.props.getStatusThink(userId);\r\n    }\r\n\r\n    render () {\r\n        if (!this.props.isAuth && !this.props.router.params.userId) {\r\n            return <Navigate to={'/login'} />\r\n        }\r\n        return <Profile {...this.props} \r\n            profile={this.props.profile} \r\n            status={this.props.status} \r\n            updateStatus={this.props.updateStatusThink} />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.postsPage.profile,\r\n    status: state.postsPage.status,\r\n    myId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\n/*  --Вызов кода без compose\r\nlet AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n\r\nexport default connect(mapStateToProps, {getOnUserProfileThink})(withRouter(AuthRedirectComponent));\r\n*/\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getOnUserProfileThink, getStatusThink, updateStatusThink}),\r\n    withRouter,\r\n    //withAuthRedirect,\r\n)(ProfileContainer);\r\n"],"names":["props","profile","className","css","src","photos","small","avatar","alt","fullName","aboutMe","lookingForAJobDescription","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","Preloader","classes","mesage","likes","Newpost","React","AddNewPostForm","onSubmit","values","addPost","newPostText","placeholder","maxLength10","maxLengthCreator","AddNewpost","handleSubmit","Field","component","Textarea","name","validate","required","type","reduxForm","form","connect","state","postsPage","dispatch","addPostActionCreator","postList","postsData","map","post","id","MyPosts","useState","editMode","setEditMode","status","setStatus","useEffect","style","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","FirstPofileImg","ProfileContainer","userId","this","router","params","myId","getOnUserProfileThink","getStatusThink","isAuth","updateStatusThink","to","compose","auth","withRouter"],"sourceRoot":""}