{"version":3,"file":"static/js/108.33749acc.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://my-app/./src/components/Dialogs/Dialog/Newmessage/Newmessage.module.css?236e","components/Dialogs/Dialog/Newmessage/Newmessage.jsx","components/Dialogs/Dialog/Newmessage/NewmessageContainer.jsx","webpack://my-app/./src/components/Message/Message.module.css?e83e","components/Message/Message.jsx","components/Message/MessageContainer.jsx","components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Dialogs_dialog__BfbLU\",\"chatList\":\"Dialogs_chatList__pie1-\",\"chatItem\":\"Dialogs_chatItem__L9HEk\",\"dialogWindow\":\"Dialogs_dialogWindow__OzPvt\"};","// extracted by mini-css-extract-plugin\nexport default {\"newMessage\":\"Newmessage_newMessage__wofws\",\"textArea\":\"Newmessage_textArea__4C9gW\",\"button\":\"Newmessage_button__ByDE2\"};","import styles from './Newmessage.module.css';\r\nimport React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from './../../../FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from './../../../../utils/validators/validators';\r\n\r\nconst maxLength12 = maxLengthCreator(12);\r\n\r\nlet Newmessage = (props) => {\r\n    \r\n    //let placeholder = props.profilePage.placeholterText;\r\n    /*\r\n    let textNewMessage = React.createRef();\r\n    \r\n    let addMessage = () => {\r\n        props.addMessage()\r\n    }\r\n\r\n    let textNewMessageChange = () => {\r\n        let text = textNewMessage.current.value;\r\n        props.updateNewMesageBody(text)\r\n    }\r\n    */\r\n\r\n    return (\r\n        <form className={styles.newMessage} onSubmit={props.handleSubmit} >\r\n            <Field component={Textarea} \r\n                validate = {[required, maxLength12]}\r\n                name='newMessageBody' \r\n                placeholder={'Написать сообщение...'} />\r\n            {/*\r\n            <input \r\n                onChange={textNewMessageChange} \r\n                className={styles.textArea} \r\n                type=\"text\" \r\n                placeholder={placeholder} \r\n                ref={textNewMessage}\r\n                value={props.profilePage.newMessageText}\r\n            />\r\n            */}\r\n            <button \r\n                //onClick={addMessage}\r\n                className={styles.button} >\r\n                Отправить\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst NewmessageForm = reduxForm({form: 'addMessageForm'})(Newmessage);\r\n\r\nexport default NewmessageForm;","import { \r\n    //addMessageActionCreator, \r\n    //updateNewMesageTextActionCreator, \r\n    sendMessage } from '../../../../redux/dialogs-reducer';\r\nimport NewmessageForm from './Newmessage';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        /*\r\n        updateNewMesageBody: (text) => {\r\n            dispatch(updateNewMesageTextActionCreator(text));\r\n        },\r\n        addMessage: () => {\r\n            dispatch(addMessageActionCreator());\r\n        },\r\n        */\r\n        onSubmit: (values) => {\r\n            //alert(values.newMessageBody)\r\n            //dispatch(updateNewMesageTextActionCreator(values.newMessageBody));\r\n            //dispatch(addMessageActionCreator());\r\n            dispatch(sendMessage(values.newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nconst NewmessageContainer = connect(mapStateToProps, mapDispatchToProps)(NewmessageForm);\r\n\r\nexport default NewmessageContainer;","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__N2vvV\",\"userMessage\":\"Message_userMessage__Swqkr\",\"User\":\"Message_User__AV5fk\"};","import css from './Message.module.css';\r\nimport avatar from '../../images/i.jpg';\r\n\r\nconst Message = (props) => {\r\n    \r\n    return (\r\n        <div className={css.message}>\r\n            <div className={css.User}>\r\n                <img src={avatar} alt=\"avatar\" />\r\n                {props.name}\r\n            </div>\r\n            <div className={css.userMessage}>\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setAuthUserData } from './../../redux/auth-reducer';\r\nimport { getOnMe } from './../../api/api';\r\nimport Message from './Message';\r\n\r\nclass MessageContainer extends React.Component {\r\n    componentDidMount () {\r\n        \r\n        getOnMe().then(data => {\r\n            if (data.resultCode === 0) {\r\n                let {email, id, login} = data.data;\r\n                this.props.setAuthUserData(id, email, login, this.props.isAuth);\r\n                \r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        return <Message {...this.props}/>\r\n    }\r\n}\r\n\r\nlet mapSrateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    }\r\n}\r\n\r\nexport default connect(mapSrateToProps, {setAuthUserData})(MessageContainer);","import NewmessageContainer from './Newmessage/NewmessageContainer';\r\nimport MessageContainer from '../../Message/MessageContainer';\r\n\r\nconst Dialog = (props) => {\r\n    \r\n    let messagesList = props.profilePage.messagesData.map( message => <MessageContainer\r\n        id={message.id} \r\n        key={message.id} \r\n        name={message.user} \r\n        message={message.message} \r\n        profile={props.profile}\r\n        />)\r\n    \r\n    return (\r\n        <div>\r\n            {messagesList}\r\n            <NewmessageContainer\r\n                profilePage={props.profilePage}\r\n                dispatch={props.dispatch}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import css from './Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport Dialog from './Dialog/Dialog';\r\n\r\nconst DialogLink = (props) => {\r\n    return (\r\n        <li>\r\n            <NavLink to={'/dialogs/'+props.id} className={css.chatItem}>{props.name}</NavLink>\r\n        </li>\r\n    )\r\n}\r\n\r\nconst Dialogs = (props) => {\r\n    \r\n    let dialogElements = props.profilePage.dialogsData.map( dialog => <DialogLink name={dialog.name} id={dialog.id} key={dialog.id}/>);\r\n\r\n    return (\r\n        <div className={css.dialog}>\r\n            <ul className={css.chatList}>\r\n                {dialogElements}\r\n            </ul>\r\n            <div className={css.dialogWindow}>\r\n                <Dialog \r\n                    profilePage={props.profilePage}\r\n                    dispatch={props.dispatch}\r\n                    profile={props.profile}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport {connect} from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return ({\r\n    isAuth: state.auth.isAuth,\r\n})}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to={'/login'} />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    \r\n    return connect(mapStateToProps)(RedirectComponent);\r\n}\r\n\r\n","//import { addMessageActionCreator, updateNewMesageTextActionCreator } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    \r\n    return {\r\n        profilePage: state.profilePage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    \r\n    return {}\r\n}\r\n\r\n/* // --Вызов кода без compose\r\nlet AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\nexport default DialogsContainer;\r\n*/\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs);"],"names":["maxLength12","maxLengthCreator","reduxForm","form","props","className","styles","onSubmit","handleSubmit","Field","component","Textarea","validate","required","name","placeholder","connect","state","profilePage","dispatch","values","sendMessage","newMessageBody","NewmessageForm","css","src","avatar","alt","message","MessageContainer","getOnMe","then","data","resultCode","email","id","login","setAuthUserData","isAuth","this","React","auth","messagesList","messagesData","map","user","profile","DialogLink","to","dialogElements","dialogsData","dialog","mapStateToProps","compose","Component","RedirectComponent","Dialogs"],"sourceRoot":""}